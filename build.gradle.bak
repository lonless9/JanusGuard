plugins {
    id 'java'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

group = 'com.janusguard'
version = '1.0.0-SNAPSHOT'
sourceCompatibility = '1.8'
targetCompatibility = '1.8'

// 明确指定源代码目录
sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
        resources {
            srcDirs = ['src/main/resources']
        }
    }
    test {
        java {
            srcDirs = ['src/test/java']
        }
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // 字节码处理 - 降级到1.9.16版本以提高兼容性
    implementation 'net.bytebuddy:byte-buddy:1.9.16'
    implementation 'net.bytebuddy:byte-buddy-agent:1.9.16'
    
    // 配置处理
    implementation 'org.yaml:snakeyaml:1.30'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.4'
    
    // 高性能队列
    implementation 'com.lmax:disruptor:3.4.4'
    
    // 日志
    implementation 'org.slf4j:slf4j-api:1.7.36'
    implementation 'ch.qos.logback:logback-classic:1.2.11'
    
    // 网络通信
    implementation 'io.grpc:grpc-netty-shaded:1.47.0'
    implementation 'io.grpc:grpc-protobuf:1.47.0'
    implementation 'io.grpc:grpc-stub:1.47.0'
    
    // 工具库
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'commons-io:commons-io:2.11.0'
    implementation 'com.google.guava:guava:31.1-jre'
    
    // 测试
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
    testImplementation 'org.mockito:mockito-core:4.6.1'
}

test {
    useJUnitPlatform()
}

jar {
    manifest {
        attributes(
                'Manifest-Version': '1.0',
                'Premain-Class': 'com.janusguard.agent.JanusAgent',
                'Agent-Class': 'com.janusguard.agent.JanusAgent',
                'Can-Redefine-Classes': 'true',
                'Can-Retransform-Classes': 'true'
        )
    }
}

// 构建包含所有依赖的完整jar
shadowJar {
    archiveBaseName.set('janusguard-agent')
    archiveClassifier.set('')
    archiveVersion.set(project.version.toString())
    mergeServiceFiles()
}

tasks.build.dependsOn tasks.shadowJar

// 安装JDK 8环境的脚本（用于CI/CD系统）
task installJdk8(type: Exec) {
    description = '安装JDK 8'
    commandLine 'sh', '-c', 'if ! command -v javac &> /dev/null; then sudo apt-get update && sudo apt-get install -y openjdk-8-jdk; fi'
}

// 为JDK 8创建兼容构建
task buildForJdk8(dependsOn: [installJdk8, 'clean', 'jar', 'shadowJar']) {
    description = '创建JDK 8兼容的构建'
    doLast {
        // 确保输出目录存在
        mkdir('output')
        // 复制构建输出
        copy {
            from('build/libs') {
                include '*.jar'
            }
            into 'output'
        }
        println "构建完成，JAR文件已复制到output目录"
    }
}

// 确保使用Java 8兼容的编译选项
compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
    // 禁用未来版本标记警告
    options.compilerArgs << '-Xlint:-options'
    // 严格强制使用JDK 8
    options.compilerArgs << '-source'
    options.compilerArgs << '1.8'
    options.compilerArgs << '-target'
    options.compilerArgs << '1.8'
}

compileTestJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
} 